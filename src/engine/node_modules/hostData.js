let table = new WebAssembly.Table({initial: 100, element: "anyfunc"});
let memory = new WebAssembly.Memory({initial: 1});
let atable = [];
let ftable = [];
let code = [];
let indicators = [];
let programs = [];
let foreigns = [];

// function lookupAtomWA(start, length){
//     var bytes = new Uint8Array(memory.buffer, start, length);
//     var string = new TextDecoder('utf8').decode(bytes);
//     return lookup_atom(string);
// }

function getCodeFromProgramWA(codeOfst, indicator) {
    let codes = programs[indicator];
    return codes[codeOfst];
}

let currentWord;
function getCodeWA(codeOfst) {
    currentWord = codeOfst;
    return code[codeOfst];
}

function getCurrentWord() {
    return currentWord;
}

let currentIndicator;
function setCodeWA(indicator) {
    currentIndicator = indicator;
    code = programs[indicator];
}

function set_code(instructions) {
    code = instructions;
}

function getCurrentIndicator() {
    return currentIndicator;
}

function getIndicatorArityWA(indicator) {
    return indicators[indicator][1];
}

function foreignWA(pred, ...args) {
    let foreignFunction = foreigns[pred];
    foreignFunction(args);
}

function lookup_atom(name)
{
    if(typeof name === 'number') {
        name = Number(name).toString();
    }

    if(typeof name !== 'string') {
        throw 'invalid lookup_atom. name must have type of string, but is ' + typeof name + '. name = ' + name;
    }

    var i;
    for (i = 0; i < atable.length; i++)
    {
        if (atable[i] === name)
            return i;
    }
    i = atable.length;
    atable[i] = name;
    return i;
}

function find_atom(internalID) {
    return atable[internalID];
}

function lookup_float(name)
{
    if(typeof name !== 'number') {
        throw 'invalid float ' + name;
    }

    var i;
    for (i = 0; i < ftable.length; i++)
    {
        if (ftable[i] === name)
            return i;
    }
    i = ftable.length;
    ftable[i] = name;
    return i;
}

function find_float(internalID) {
    return ftable[internalID];
}

function lookupIndicator(name, arity) {
    let nameID = lookup_atom(name);

    let i;
    for (i = 0; i < indicators.length; i++) {
        if (indicators[i][0] === nameID
            && indicators[i][1] === arity) {
            console.log(name + '/' + arity + ' found ' + i);
            return i;
        }
    }
    i = indicators.length;
    indicators[i] = [nameID, arity];
    console.log(name + '/' + arity + ' created ' + i);
    return i;
}

function get_indicator_pair(ofst) {
    return indicators[ofst];
}

function indicator_to_string(indicator) {
    let pair = indicators[indicator];
    let functorName = find_atom(pair[0]);
    return functorName + '/' + pair[1];
}

function get_program(indicator) {
    return programs[indicator];
}

function registerProgram(indicator, code) {
    programs[indicator] = code;
}

function registerForeign(predicateName, arity, foreignFunction) {
    foreigns[lookupIndicator(predicateName, arity)] = foreignFunction;
}

module.exports.memory = memory;
module.exports.table = table;

module.exports.getCodeFromProgramWA = getCodeFromProgramWA;
module.exports.getCodeWA = getCodeWA;
module.exports.setCodeWA = setCodeWA;
module.exports.set_code = set_code;
module.exports.getIndicatorArityWA = getIndicatorArityWA;
module.exports.foreignWA = foreignWA;

module.exports.getCurrentWord = getCurrentWord;
module.exports.getCurrentIndicator = getCurrentIndicator;

module.exports.lookup_atom = lookup_atom;
module.exports.find_atom = find_atom;
module.exports.lookup_float = lookup_float;
module.exports.find_float = find_float;
module.exports.lookupIndicator = lookupIndicator;
module.exports.get_indicator_pair = get_indicator_pair;
module.exports.indicator_to_string = indicator_to_string;
module.exports.get_program = get_program;
module.exports.registerProgram = registerProgram;
module.exports.registerForeign = registerForeign;


