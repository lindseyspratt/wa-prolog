const fs = require('fs');
let hostData;

let wam = {};


let buffer = [];

function loadBuffer(url) {
    buffer = fs.readFileSync(url).buffer;
}
function getByte() {
    return  buffer.shift();
}

function predicate_load_buffer(urlID) {
    loadBuffer(hostData.find_atom((urlID)));
}

function predicate_get_byte(value) {
    let byte = getByte();
    wam.unify(value, wam.tagInteger(byte)); // wam.unify sets wam.$fail == true if unify/2 fails.
}

module.exports.hostData = hostData;
module.exports.wam = wam;
module.exports.predicate_get_byte = predicate_get_byte;


// get_byte(Stream, Byte) :-
//     stream_read(Stream, Read),
//     callx(Read, Byte).
//
// callx(pred, a1, a2, ...)
//
// compiles to
//     put arity in a1
//     prep arg2 to a2
//     ...
//     prep argX to aX
//     prep arg1 to aX+1
//     put pred in aX+2
//     callx N
//
//
//     get_variable 1, 1, 2    ;; Byte/A2 to Y1. A1 left in place.
//     put_variable 1, 2, 2    ;; create var for Read in Y2 and A2.
//     call stream_read/2, 1
//     put_integer 1, 2        ;; put arity 1 in A1
//     put_value 1, 1, 2       ;; put value in Y1 to A2 (A1+1)
//     put_value 1, 2, 3       ;; put value in Y2 to A3 (A1+2)
//     executex
//
//
// call(P ; Q) :-
//     call(P).
// call(P ; Q) :-
//     call(Q).
// call((P,Q)) :-
//     call(P),
//     call(Q).
// call(P) :-
//     P =.. [F|As],
//     callXL(F, As).
//
// call(P, As) :-
//     P =.. [F|PAs],
//     append(PAs, As, FAs),
//     callXL(F, FAs).








